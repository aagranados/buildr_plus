<?xml version="1.0"?>

<ruleset name="StockSoftware"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
  <description>
    The rules applied to our code bases.
  </description>

  <rule ref="category/java/bestpractices.xml/AccessorClassGeneration"/>
  <rule ref="category/java/bestpractices.xml/AccessorMethodGeneration"/>
  <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly"/>
  <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace"/>
  <rule ref="category/java/bestpractices.xml/AvoidReassigningLoopVariables"/>
  <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters"/>
  <rule ref="category/java/bestpractices.xml/AvoidStringBufferField"/>
  <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP"/>
  <rule ref="category/java/bestpractices.xml/CheckResultSet"/>
  <rule ref="category/java/bestpractices.xml/ConstantsInInterface"/>
  <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt"/>
  <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach"/>
  <rule ref="category/java/bestpractices.xml/ForLoopVariableCount"/>
  <rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation"/>
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseAfterAnnotation"/>
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation"/>
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation"/>
  <rule ref="category/java/bestpractices.xml/JUnitAssertionsShouldIncludeMessage"/>
  <rule ref="category/java/bestpractices.xml/LooseCoupling"/>
  <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray"/>
  <rule ref="category/java/bestpractices.xml/MissingOverride"/>
  <rule ref="category/java/bestpractices.xml/OneDeclarationPerLine"/>
  <rule ref="category/java/bestpractices.xml/PositionLiteralsFirstInCaseInsensitiveComparisons"/>
  <rule ref="category/java/bestpractices.xml/PositionLiteralsFirstInComparisons"/>
  <rule ref="category/java/bestpractices.xml/PreserveStackTrace"/>
  <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator"/>
  <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap"/>
  <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList"/>
  <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault"/>
  <rule ref="category/java/bestpractices.xml/SystemPrintln"/>
  <rule ref="category/java/bestpractices.xml/UnusedFormalParameter"/>
  <rule ref="category/java/bestpractices.xml/UnusedLocalVariable"/>
  <rule ref="category/java/bestpractices.xml/UnusedPrivateField"/>
  <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod">
    <properties>
      <property name="violationSuppressXPath"
                value="./ancestor::ClassOrInterfaceBodyDeclaration/Annotation/NormalAnnotation/Name[@Image='DataProvider']
                  | ./ancestor::ClassOrInterfaceBodyDeclaration/Annotation/MarkerAnnotation/Name[@Image='PostConstruct' or @Image='PreDestroy' or @Image='AroundInvoke']"/>
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/UseAssertEqualsInsteadOfAssertTrue"/>
  <rule ref="category/java/bestpractices.xml/UseAssertNullInsteadOfAssertTrue"/>
  <rule ref="category/java/bestpractices.xml/UseAssertSameInsteadOfAssertTrue"/>
  <rule ref="category/java/bestpractices.xml/UseAssertTrueInsteadOfAssertEquals"/>
  <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty"/>

  <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
  <rule ref="category/java/design.xml/DoNotExtendJavaLangError"/>
  <rule ref="category/java/design.xml/FinalFieldCouldBeStatic"/>
  <rule ref="category/java/design.xml/UselessOverridingMethod"/>
  <rule ref="category/java/design.xml/UseUtilityClass"/>

  <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass"/>
  <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending"/>
  <rule ref="category/java/codestyle.xml/ControlStatementBraces"/>
  <rule ref="category/java/codestyle.xml/DontImportJavaLang"/>
  <rule ref="category/java/codestyle.xml/DuplicateImports"/>
  <rule ref="category/java/codestyle.xml/ExtendsObject"/>
  <rule ref="category/java/codestyle.xml/FieldDeclarationsShouldBeAtStartOfClass"/>
  <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop"/>
  <rule ref="category/java/codestyle.xml/IdenticalCatchBranches"/>
  <rule ref="category/java/codestyle.xml/LocalVariableCouldBeFinal"/>
  <rule ref="category/java/codestyle.xml/MethodArgumentCouldBeFinal"/>
  <rule ref="category/java/codestyle.xml/PackageCase"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryAnnotationValueElement"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryConstructor"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>
  <rule ref="category/java/codestyle.xml/UseDiamondOperator"/>
  <rule ref="category/java/codestyle.xml/UselessQualifiedThis"/>

  <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions">
    <properties>
      <property name="localVarPattern" value="(?![a-zA-Z0-9]*[Dd][Tt][Oo][Ss]?$)[a-z][a-zA-Z0-9]*$"/>
      <property name="finalVarPattern" value="(?![a-zA-Z0-9]*[Dd][Tt][Oo][Ss]?$)[a-z][a-zA-Z0-9]*$"/>
      <property name="catchParameterPattern" value="(?![a-zA-Z0-9]*[Dd][Tt][Oo][Ss]?$)[a-z][a-zA-Z0-9]*$"/>
    </properties>
  </rule>

  <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions">
    <properties>
      <property name="methodParameterPattern" value="(?![a-zA-Z0-9]*[Dd][Tt][Oo][Ss]?$)[a-z][a-zA-Z0-9]*"/>
      <property name="finalMethodParameterPattern" value="(?![a-zA-Z0-9]*[Dd][Tt][Oo][Ss]?$)[a-z][a-zA-Z0-9]*"/>
      <property name="lambdaParameterPattern" value="(?![a-zA-Z0-9]*[Dd][Tt][Oo][Ss]?$)[a-z][a-zA-Z0-9]*"/>
      <property name="explicitLambdaParameterPattern" value="(?![a-zA-Z0-9]*[Dd][Tt][Oo][Ss]?$)[a-z][a-zA-Z0-9]*"/>
    </properties>
  </rule>

  <rule ref="category/java/errorprone.xml">
    <exclude name="AssignmentInOperand"/>
    <exclude name="AvoidCatchingThrowable"/>
    <exclude name="AvoidDuplicateLiterals"/>
    <exclude name="AvoidFieldNameMatchingMethodName"/>
    <exclude name="AvoidLiteralsInIfCondition"/>
    <exclude name="BeanMembersShouldSerialize"/>
    <exclude name="CompareObjectsWithEquals"/>
    <exclude name="DataflowAnomalyAnalysis"/>
    <exclude name="MissingSerialVersionUID"/>
    <exclude name="NullAssignment"/>
    <exclude name="SimpleDateFormatNeedsLocale"/>
    <exclude name="TestClassWithoutTestCases"/>
    <exclude name="UseLocaleWithCaseConversions"/>
  </rule>
</ruleset>
